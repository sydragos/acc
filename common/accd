#!/system/bin/sh
# Advanced Charging Controller Daemon (accd)
# Copyright (C) 2017-2019, VR25 @ xda-developers
# License: GPL V3+


main() {

  umask 0
  set -euo pipefail

  modId=acc
  coolDown=false
  resetUnplugged=false
  pidFile=/dev/$modId/pid
  config=/data/media/0/$modId/config.txt

  modPath=/system/etc/$modId
  [ -f $modPath/module.prop ] || modPath=/sbin/.core/img/$modId
  [ -f $modPath/module.prop ] || modPath=/sbin/.magisk/img/$modId

  which awk 1>/dev/null || PATH=$(echo $modPath | sed 's|/img/.*|/busybox|'):$PATH

  log=${config%/*}/logs/acc-daemon-$(getprop ro.product.device | grep .. || getprop ro.build.product).log

  batt=$(echo /sys/class/power_supply/*attery/capacity | awk '{print $1}' | sed 's|/capacity||')

  # wait until data is decrypted
  until [ -d /data/media/0/?ndroid ]; do
    sleep 10
  done

  # make sure the number of running accd processes is at most one
  sh $modPath/system/*bin/acc --daemon stop 1>/dev/null

  # self-upgrade
  (PS4="++ "
  if eval $(get_value selfUpgrade) && [ ! -f ${pidFile%/*}/installed ]; then
    sleep $((60*10))
    baseUrl=https://raw.githubusercontent.com/Magisk-Modules-Repo/acc/master
    curl -L $baseUrl/module.prop 2>/dev/null | grep selfUpgrade=true 1>/dev/null 2>&1 || exit $?
    curl -L $baseUrl/install.sh 2>/dev/null > ${pidFile%/*}/install.sh || exit $?
    sh ${pidFile%/*}/install.sh
  fi
  exit $? &) &

  mkdir -p ${pidFile%/*} ${config%/*}/logs
  [ -f $config ] || install -m 0777 $modPath/default_config.txt $config
  echo $$ > $pidFile
  cd /sys/class/power_supply/

  # diagnostics and cleanup
  { grep -Eiq 'alpha|beta' $modPath/module.prop || eval $(get_value verbose); } \
    || log=${pidFile%/*}/acc-daemon-$(getprop ro.product.device | grep .. || getprop ro.build.product).log
  echo "###$(date)###" >> $log
  echo "versionCode=$(sed -n s/versionCode=//p $modPath/module.prop 2>/dev/null || :)" >> $log
  exec 1>>$log 2>&1
  set -x
  trap exxit EXIT

  [ -d $modPath ] || exxit 1 "(!) modPath not found"
  unset modId
  on_boot
  sh $modPath/system/*bin/acc --voltage apply 1>/dev/null 2>&1 || :
  check_compatibility
  ctrl_charging
}


exxit() {
  local exitCode=$?
  set +euxo pipefail
  rm $pidFile 2>/dev/null
  enable_charging 2>/dev/null 1>&2
  [ -n "$1" ] && echo "$2" && exitCode=$1
  echo "***EXIT $exitCode***"
  exit $exitCode
}


get_value() { sed -n "s|^$1=||p" $config | sed -e 's/#.*//' -e 's/ $//' -e 's/ $//' -e 's/ $//'; }


get_batt_capacity() { dumpsys battery | grep level: | sed 's|.*level: ||'; }


is_charging() {
  local target="" value=""
  local is_charging=true

  grep -Eiq 'dis|not' $batt/status && is_charging=false || :

  if $is_charging; then
    resetUnplugged=true
    for target in $(get_value onPlugged); do
      value=${target##*:}
      target=${target%:*}
      [ -f $target ] && chmod +w $target && echo $value > $target || :
    done

    # pause charging for _seconds if charging voltage >= set mV_ limit
    [ -n "$(get_value vNow)" ] && [ $(grep -o '^....' $batt/voltage_now) -ge $(get_value vNow | cut -d_ -f1) ] \
      && disable_charging && sleep $(get_value vNow | cut -d_ -f2) \
        && is_charging=false && enable_charging && is_charging=true || :

  else
    if $resetUnplugged && ! $coolDown && eval $(get_value resetUnplugged); then
      dumpsys batterystats --reset 1>/dev/null 2>&1 || :
      rm /data/system/batterystats* 2>/dev/null || :
      resetUnplugged=false
    fi
  fi

  # limit log size
  [ $(du -m $log | awk '{print $1}') -gt $(get_value maxLogSize) ] \
    && cp -f $log $log.old && : >$log || :

  $is_charging && return 0 || return 1
}


disable_charging() {
  local s="" off=""
  if is_charging; then
    if get_value switch | grep -q /; then
      s=$(get_value switch | awk '{print $1}')
      off=$(get_value switch | awk '{print $3}')
      if [ -f $s ]; then
        chmod +w $s && echo $off > $s \
          || sh $modPath/system/*bin/acc -s s- 1>/dev/null
      else
        sh $modPath/system/*bin/acc -s s- 1>/dev/null
      fi
      #sleep 1
      #! is_charging || sh $modPath/system/*bin/acc -s s- 1>/dev/null
    else
      switch_loop off
      ! is_charging || exxit 1 "(!) Unsupported device"
    fi
  fi
  # cool down
  ! is_charging && [ $(cat $batt/temp 2>/dev/null || cat $batt/batt_temp) -ge $(get_value temp | cut -d- -f2 | cut -d_ -f1) ] \
    && sleep $(get_value temp | cut -d- -f2 | cut -d_ -f2) || :
}


enable_charging() {
  local s="" on=""
  if ! is_charging; then
    if get_value switch | grep -q /; then
      s=$(get_value switch | awk '{print $1}')
      on=$(get_value switch | awk '{print $2}')
      if [ -f $s ]; then
        chmod +w $s && echo $on > $s \
          || sh $modPath/system/*bin/acc -s s- 1>/dev/null
      else
        sh $modPath/system/*bin/acc -s s- 1>/dev/null
      fi
    else
      switch_loop on
    fi
  fi
}


ctrl_charging() {
  local c=0 s=""
  while [ -f $pidFile ]; do

    if is_charging; then
      # disable charging & clear battery stats if conditions apply
      if [ $(cat $batt/temp 2>/dev/null || cat $batt/batt_temp) -ge $(get_value temp | cut -d- -f2 | cut -d_ -f1) ] \
        || [ $(get_batt_capacity) -ge $(get_value capacity | cut -d, -f3 | cut -d- -f2) ]
      then
        disable_charging
        dumpsys batterystats --reset 1>/dev/null 2>&1 || :
        rm /data/system/batterystats* 2>/dev/null || :
        sleep $(get_value rebootOnPause) 2>/dev/null \
          && reboot || :
      fi

      # cool down
      while [ -f $pidFile ] && get_value coolDown | grep -q / && is_charging \
        && [ $(get_batt_capacity) -lt $(get_value capacity | cut -d, -f3 | cut -d- -f2) ] \
        && [ $(cat $batt/temp 2>/dev/null || cat $batt/batt_temp) -lt $(get_value temp | cut -d- -f2 | cut -d_ -f1) ]
      do
        coolDown=true
        if [ $(cat $batt/temp 2>/dev/null || cat $batt/batt_temp) -ge $(get_value temp | cut -d- -f1) ] \
          || [ $(get_batt_capacity) -ge $(get_value capacity | cut -d, -f2) ]
        then
          disable_charging
          sleep $(get_value coolDown | cut -d/ -f2)
          enable_charging
          c=0
          while [ $c -lt $(get_value coolDown | cut -d/ -f1) ]; do
            sleep $(get_value loopDelay)
            [ $(get_batt_capacity) -lt $(get_value capacity | cut -d, -f3 | cut -d- -f2) ] \
              && [ $(cat $batt/temp 2>/dev/null || cat $batt/batt_temp) -lt $(get_value temp | cut -d- -f2 | cut -d_ -f1) ] \
                && c=$((c + $(get_value loopDelay))) || break
          done
        else
          break
        fi
      done
      coolDown=false

    else
      # enable charging if conditions apply
      if [ $(get_batt_capacity) -le $(get_value capacity | cut -d, -f3 | cut -d- -f1) ] \
        && [ $(cat $batt/temp 2>/dev/null || cat $batt/batt_temp) -lt $(get_value temp | cut -d- -f2 | cut -d_ -f1) ]
      then
        enable_charging
      fi
      # auto-shutdown if battery is not charging and capacity is too low
      if ! is_charging && [ $(get_batt_capacity) -le $(get_value capacity | cut -d, -f1) ]; then
        reboot -p || :
      fi
    fi

    sleep $(get_value loopDelay)
  done
}


check_compatibility() {
  local s="" compatible=false
  if ! get_value switch | grep -q /; then
    while IFS= read -r s; do
      if [ -f $(echo $s | awk '{print $1}') ]; then
        compatible=true
        break
      fi
    done <<SWITCHES
$(grep -Ev '#|^$' $modPath/switches.txt)
SWITCHES
  else
    [ -f $(get_value switch | awk '{print $1}') ] && compatible=true
  fi
  $compatible || exxit 1 "(!) Unsupported device"
  unset -f check_compatibility
}


# apply onBoot settings
on_boot() {
  local target="" value=""
  for target in $(get_value onBoot); do
    value=${target##*:}
    target=${target%:*}
    [ -f $target ] && chmod +w $target && echo $value > $target || :
  done
  eval $(get_value onBootExit) && exit 0 || :
  unset -f on_boot
}


switch_loop() {
  local s="" on="" off="" default=""
  while IFS= read -r s; do
    if [ -f $(echo $s | awk '{print $1}') ]; then
      on=$(echo $s | awk '{print $2}')
      off=$(echo $s | awk '{print $3}')
      s=$(echo $s | awk '{print $1}')
      default=$(sed -n 1p $s)
      chmod +w $s && eval "echo \$$1" >$s && sleep 1 || continue
      if { [ $1 = off ] && is_charging; } || { [ $1 = on ] && ! is_charging; }; then
        echo $default >$s && sleep 1 || :
      else
        break
      fi
    fi
  done <<SWITCHES
$(grep -Ev '#|^$' $modPath/switches.txt)
SWITCHES
}


# run the actual thing
main
